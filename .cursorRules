# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using f-strings with JSON templates, double the curly braces `{{` and `}}` to escape them properly and avoid format specifier errors
- When working with experimental models like `gemini-2.0-flash-thinking-exp-01-21`, always implement fallback mechanisms to standard models in case the experimental model is unavailable
- For options data, use RapidAPI directly instead of the YahooFinanceConnector class to avoid compatibility issues with the OptionChainQuote initialization
- When processing options data from RapidAPI, create a mapping of strikes to straddles for easier lookup and processing of call and put data

# New Implementation Notes for Unstructured Framework

## Current Task
Building an end-to-end unstructured framework for educational content processing

## Project Overview
Create a modular framework that:
1. Ingests diverse unstructured data types (Documents, Text, Audio, Images)
2. Processes and standardizes content through a unified pipeline
3. Generates embeddings and metadata
4. Stores processed content in vector database
5. Provides LLM interface for content retrieval and interaction
6. Implements automation for continuous processing

## Implementation Progress

### 1. Core Framework Components
[X] Create base ContentProcessor abstract class
[X] Implement PDFProcessor class
[X] Create VectorStore class for embedding storage
[X] Implement UnstructuredFramework core class
[X] Create LLMInterface for query handling
[X] Setup basic test framework

### 2. Next Implementation Steps
[ ] Complete PDF processor implementation
  [ ] Add extract_key_concepts method
  [ ] Add identify_sections method
  [ ] Implement chunking strategy
[ ] Implement text processor
[ ] Add audio processor with transcription
[ ] Create image processor with OCR
[ ] Implement video processor

### 3. Integration Tasks
[ ] Connect with existing Streamlit interface
[ ] Integrate with LLM API
[ ] Setup proper error handling
[ ] Add logging system
[ ] Implement caching for performance

## Implementation Details

### 1. Directory Structure
```
final_rag_sys/
├── processors/
│   ├── base.py           # Base abstract processor class
│   ├── pdf_processor.py  # PDF specific processor
│   ├── text_processor.py # Text processor
│   ├── audio_processor.py # Audio processor
│   └── image_processor.py # Image processor with OCR
├── storage/
│   └── vector_store.py   # Vector database interface
├── framework.py          # Main framework class
├── llm_interface.py      # LLM query interface
├── tests/                # Test directory
│   └── test_framework.py # Framework tests
└── streamlit_app.py      # Streamlit interface
```

### 2. Key Classes and Methods

#### ContentProcessor (Abstract Base Class)
- `extract_content(content)`: Extract text from various content types
- `generate_metadata(content)`: Generate metadata from content
- `create_embeddings(content)`: Create vector embeddings

#### PDFProcessor
- Inherits from ContentProcessor
- Uses PyPDF2 for text extraction
- Uses sentence-transformers for embeddings
- Implements metadata extraction specific to PDFs

#### VectorStore
- Handles storage and retrieval of embeddings
- Uses ChromaDB for vector storage
- Provides search functionality

#### UnstructuredFramework
- Main orchestration class
- Manages content processors
- Handles the processing pipeline
- Stores processed content in vector database

#### LLMInterface
- Provides query interface to processed content
- Retrieves relevant content based on queries
- Generates responses using LLM

### 3. Dependencies
- PyPDF2 for PDF processing
- sentence-transformers for embeddings
- chromadb for vector storage
- pytest for testing
- asyncio for async processing

### 4. Implementation Approach

1. **Phase 1: Core Components**
   - Focus on getting the basic architecture working
   - Implement PDF processing as first content type
   - Setup vector storage with ChromaDB
   - Create basic LLM interface

2. **Phase 2: Additional Processors**
   - Add text processor for plain text files
   - Implement audio processor with transcription
   - Add image processor with OCR
   - Create video processor

3. **Phase 3: Integration and Enhancement**
   - Connect with Streamlit interface
   - Implement proper error handling
   - Add comprehensive logging
   - Setup caching for performance
   - Add batch processing capabilities

### 5. Testing Strategy
- Unit tests for each processor
- Integration tests for the framework
- Performance testing for large documents
- End-to-end testing with Streamlit interface

## Technical Challenges to Address

1. **PDF Processing Improvements**
   - Need to implement extract_key_concepts and identify_sections methods
   - Current implementation needs to handle tables and images in PDFs
   - Need to implement proper chunking for large documents

2. **Embedding Generation**
   - Need to select optimal embedding model
   - Implement chunking strategy for long documents
   - Handle multilingual content

3. **Vector Storage**
   - Ensure proper metadata serialization
   - Implement efficient retrieval mechanisms
   - Add caching for frequently accessed content

4. **LLM Interface**
   - Implement get_relevant_content method
   - Create generate_response method
   - Handle context window limitations

## Next Steps

1. Complete the PDF processor implementation by adding the missing methods:
   ```python
   def extract_key_concepts(self, text, num_concepts=5):
       # Implementation from streamlit_pdf_processor.py
       # with enhancements
   
   def identify_sections(self, text):
       # Implementation from streamlit_pdf_processor.py
       # with enhancements
   ```

2. Implement text processor:
   ```python
   class TextProcessor(ContentProcessor):
       def __init__(self):
           self.embedding_model = SentenceTransformer('all-MiniLM-L6-v2')
       
       async def extract_content(self, text_file):
           # Read text file
           return text_file.read()
       
       # Other required methods
   ```

3. Connect with Streamlit interface:
   - Update streamlit_pdf_processor.py to use the new framework
   - Add support for multiple file types
   - Create visualization for metadata and embeddings

4. Add proper error handling and logging:
   ```python
   import logging
   
   logging.basicConfig(
       level=logging.INFO,
       format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
   )
   
   logger = logging.getLogger(__name__)
   ```

5. Implement caching for performance:
   ```python
   from functools import lru_cache
   
   @lru_cache(maxsize=100)
   def get_embeddings(text):
       # Generate embeddings
   ```

# Scratchpad

## Current Task
Enhancing Investment Analysis System with Deep Reasoning and Feedback Loop

## Project Overview
The goal is to enhance the existing investment analysis system by:
1. Implementing a feedback loop between initial market quote analysis and deep reasoning analysis
2. Utilizing experimental deep reasoning models for more sophisticated analysis
3. Generating learning points to continuously improve the analysis process
4. Creating an enhanced analysis pipeline that integrates these improvements
5. Integrating options analysis with the enhanced analysis pipeline
6. Building a Streamlit interface to visualize and interact with the analysis

## Progress

### 1. Deep Reasoning Implementation
[X] Create deep reasoning analysis function
  [X] Implement standard deep reasoning in `deep_reasoning_fix.py`
  [X] Implement experimental model version in `deep_reasoning_fix_experimental.py`
  [X] Add fallback mechanism to standard model if experimental model fails
  [X] Create test script for deep reasoning analysis

### 2. Feedback Loop Implementation
[X] Create feedback loop system
  [X] Implement contradiction detection between initial and deep analyses
  [X] Create function to update initial analysis based on contradictions
  [X] Implement learning point generation for future improvement
  [X] Add experimental model support with fallbacks
  [X] Fix format specifier error in JSON template

### 3. Enhanced Analysis Pipeline
[X] Create enhanced analysis pipeline
  [X] Implement `EnhancedAnalysisPipeline` class
  [X] Add support for feedback loop integration
  [X] Create learning database for tracking improvements
  [X] Implement visualization for learning trends
  [X] Create demo script to showcase the pipeline

### 4. Direct Deep Reasoning for Initial Analysis
[X] Create enhanced initial analysis using deep reasoning model
  [X] Implement `enhanced_initial_analysis.py` script
  [X] Use experimental model for initial analysis with fallback
  [X] Add comprehensive output format with support/resistance levels
  [X] Include macroeconomic factors in analysis
  [X] Add nuanced trading strategies for different risk profiles

### 5. Options Analysis Integration
[X] Create options enhanced analysis script
  [X] Implement `options_enhanced_analysis.py` script
  [X] Add deep reasoning for options analysis with experimental model
  [X] Combine market and options analysis results
  [X] Handle options data compatibility issues
  [X] Add visualization for learning trends

### 6. Fix Options Data Compatibility Issue
[X] Implement direct RapidAPI integration for options data
  [X] Create function to fetch options data from RapidAPI
  [X] Create function to prepare options data for analysis
  [X] Add debugging output for options data
  [X] Implement fallback to standard analysis if options data unavailable
  [X] Successfully test with AAPL ticker

### 7. Streamlit Interface Development
[ ] Create Streamlit interface for integrated analysis
  [ ] Design interface layout and components
  [ ] Implement ticker selection and analysis type options
  [ ] Create market analysis visualization components
  [ ] Create options analysis visualization components
  [ ] Implement cross-validation display between market and options analysis
  [ ] Add interactive elements for exploring different strategies
  [ ] Create historical data visualization
  [ ] Implement learning database visualization
  [ ] Add user feedback collection mechanism

## Streamlit Interface Plan

### 1. Interface Structure
- **Header Section**: App title, description, and navigation
- **Input Section**: Ticker selection, analysis type, date range
- **Market Analysis Section**: Technical indicators, sentiment, support/resistance
- **Options Analysis Section**: IV, put-call ratio, recommended strategies
- **Cross-Validation Section**: Confirmation/contradiction between analyses
- **Strategy Recommendation Section**: Integrated strategy suggestions
- **Learning Database Section**: Visualization of learning points
- **Historical Performance Section**: Backtesting results (future)

### 2. Key Components to Implement
- Ticker input with autocomplete
- Analysis type selection (basic, comprehensive, options-enhanced)
- Date range selector for historical analysis
- Technical indicator charts (price, volume, moving averages)
- Options data visualization (IV surface, put-call ratio)
- Strategy cards with detailed explanations
- Cross-validation indicators (agreement/disagreement highlights)
- Learning database trend charts
- Feedback collection buttons

### 3. Data Flow
1. User inputs ticker and analysis parameters
2. App fetches market data from Yahoo Finance
3. App fetches options data from RapidAPI
4. Enhanced analysis pipeline processes both data sources
5. Results are displayed in respective sections
6. Cross-validation logic highlights agreements/contradictions
7. Strategy recommendations are generated and displayed
8. User can provide feedback on analysis quality

### 4. Technical Implementation Considerations
- Use Streamlit caching for expensive operations
- Implement asynchronous data fetching where possible
- Create modular components for reusability
- Use Plotly for interactive charts
- Implement session state to maintain analysis between interactions
- Add error handling for API failures
- Implement progress indicators for long-running analyses

### 5. Development Phases
1. **Phase 1**: Basic interface with ticker selection and market analysis
2. **Phase 2**: Add options analysis visualization
3. **Phase 3**: Implement cross-validation and integrated strategy recommendations
4. **Phase 4**: Add historical analysis and backtesting
5. **Phase 5**: Implement user feedback and continuous learning

## Next Steps
[ ] Enhance the initial analysis with historical data
  [ ] Add support for fetching historical price data
  [ ] Implement trend analysis over different timeframes
  [ ] Add technical indicator calculations (RSI, MACD, etc.)
  [ ] Create visualization of historical trends

[ ] Implement backtesting for strategies
  [ ] Create backtesting framework for recommended strategies
  [ ] Add performance metrics and visualization
  [ ] Compare strategies generated by different models
  [ ] Implement optimization based on historical performance

## System Architecture Plan

### 1. Data Ingestion Layer
[ ] Create a unified data ingestion framework
  [ ] Design abstract base class for API connectors
  [ ] Implement Economic Calendar API connector
  [ ] Implement Yahoo Finance API connector
  [ ] Add options data fetching capabilities
  [ ] Implement rate limiting and error handling

### 2. Data Storage Layer
[ ] Design a flexible data storage system
  [ ] Create data models for different types of financial data
  [ ] Implement metadata tagging system
  [ ] Add keyword extraction and indexing
  [ ] Design caching mechanism for API responses
  [ ] Implement data versioning for historical analysis

### 3. Agent Enhancement
[ ] Upgrade existing agents with new capabilities
  [ ] Add macroeconomic analysis to fundamental agents
  [ ] Enhance sentiment agent with economic event sentiment
  [ ] Create new options analysis agent
  [ ] Implement market condition evaluation (overbought/oversold)
  [ ] Add entry/exit point optimization

### 4. Options Analysis Module
[ ] Build specialized options analysis capabilities
  [ ] Implement Black-Scholes model for options pricing
  [ ] Create Greeks calculator (Delta, Gamma, Theta, Vega, Rho)
  [ ] Design option chain visualization tools
  [ ] Add implied volatility surface analysis
  [ ] Implement options strategy evaluation

### 5. Strategy Optimization
[ ] Create a strategy optimization framework
  [ ] Design scoring system for strategy evaluation
  [ ] Implement backtesting for options strategies
  [ ] Add risk-adjusted return calculations
  [ ] Create portfolio optimization with options hedging
  [ ] Implement strategy comparison visualization

## Implementation Approach

### Phase 1: Data Infrastructure
1. First, we'll build the data ingestion and storage infrastructure:
   - Create `src/data/connectors/` directory for API connectors
   - Implement base connector class with common functionality
   - Add specific connectors for each API source
   - Design data models in `src/data/models.py`
   - Implement metadata system in `src/data/metadata.py`

2. Data models needed:
   - EconomicEvent (date, event_name, actual, forecast, previous, impact)
   - StockPrice (ticker, date, open, high, low, close, volume)
   - OptionChain (ticker, expiration_date, strikes, calls, puts)
   - OptionContract (contract_type, strike, expiration, bid, ask, volume, open_interest, greeks)

### Phase 2: Options Analysis
1. Create new modules for options analysis:
   - `src/analysis/options.py` - Core options pricing and Greeks calculations
   - `src/analysis/volatility.py` - Volatility analysis and surface modeling
   - `src/analysis/strategies.py` - Options strategy evaluation

2. Key functions to implement:
   - calculate_option_price(S, K, T, r, sigma, option_type)
   - calculate_greeks(option, underlying_price)
   - evaluate_market_conditions(ticker, timeframe)
   - find_optimal_entry_exit(ticker, strategy, risk_tolerance)

### Phase 3: Agent Enhancement
1. Enhance existing agents:
   - Update `src/agents/fundamentals.py` to incorporate economic data
   - Enhance `src/agents/sentiment.py` to analyze economic event sentiment
   - Create new `src/agents/options_analyst.py` for options-specific analysis
   - Update `src/agents/risk_manager.py` to handle options risk

2. Create new agent:
   - `src/agents/options_strategist.py` - Specialized in options strategies

### Phase 4: Strategy Optimization
1. Enhance backtester to support options:
   - Update `src/backtester.py` to handle options strategies
   - Add options-specific performance metrics
   - Implement visualization for options strategy performance

2. Create strategy optimizer:
   - `src/optimizer.py` - Compare and rank different strategies
   - Add risk-adjusted return calculations
   - Implement portfolio optimization with options

## Technical Considerations

1. **API Rate Limits**: 
   - Implement caching to reduce API calls
   - Add exponential backoff for retries
   - Consider batch requests where possible

2. **Data Storage**:
   - Use SQLite for local development
   - Consider PostgreSQL for production
   - Implement efficient indexing for keyword searches

3. **Computational Efficiency**:
   - Use NumPy/SciPy for options calculations
   - Consider parallel processing for backtesting
   - Implement lazy loading for large datasets

4. **Dependencies**:
   - yfinance for Yahoo Finance data
   - pandas-datareader for economic data
   - scipy for mathematical functions
   - py_vollib for options pricing
   - matplotlib/seaborn for visualization

## Next Steps
1. Enhance the initial analysis with historical data
2. Integrate options analysis with deep reasoning
3. Implement backtesting for strategies generated by the enhanced analysis pipeline


Integration Notes:
Parallel processing of textual and visual content
Innovate handles text extraction and analysis
Coactive processes images and videos
Results are merged into unified content representations
Cross-referencing creates connections between text and visuals
Content chunking strategies are coordinated between systems
What's Happening:
Documents are processed through Innovate's text pipeline
Images and videos are sent to Coactive for processing
Key concepts extracted from text guide visual concept creation
Visual content is analyzed and tagged by Coactive
Metadata from both systems is merged and enhanced
Cross-references are created between related content
Unified content representation is stored in vector database

# Building Our Own Visual Understanding Capabilities

## Overview
To build our own visual content processing system comparable to Coactive, we need to develop several key components:

1. Visual content ingestion and processing pipeline
2. Computer vision models for content understanding
3. Multimodal embedding generation
4. Visual concept and relationship extraction
5. Search and retrieval system for visual content
6. Integration with our existing text processing framework

## Core Components to Build

### 1. Visual Content Processing Pipeline

[X] Create base ContentProcessor abstract class
[ ] Implement specialized processors:
  [ ] ImageProcessor - Extract features, text, and objects from images
  [ ] VideoProcessor - Process video frames, extract scenes and content
  [ ] DiagramProcessor - Specialized handling for charts, graphs, and diagrams
  [ ] SlideProcessor - Extract structured content from presentation slides

**Implementation Notes:**
- Use OpenCV for basic image processing
- Leverage Tesseract OCR for text extraction from images
- Implement scene detection for videos using PySceneDetect
- Use ffmpeg for video frame extraction and processing
- Create metadata schema for visual content types

### 2. Computer Vision Models

[ ] Implement or integrate models for:
  [ ] Object detection (YOLO, Faster R-CNN)
  [ ] Image classification (ResNet, EfficientNet)
  [ ] Scene understanding (SegFormer, DeepLabV3)
  [ ] OCR for text in images (Tesseract, EasyOCR)
  [ ] Face and person detection (RetinaFace)
  [ ] Diagram understanding (specialized models)

**Implementation Notes:**
- Use Hugging Face Transformers for pre-trained models
- Fine-tune models on educational content
- Implement model serving with ONNX Runtime or TensorRT for performance
- Create ensemble models for improved accuracy
- Implement caching for model predictions

### 3. Multimodal Embeddings

[ ] Develop embedding generation for:
  [ ] Images (CLIP, DINOv2)
  [ ] Video frames (VideoMAE)
  [ ] Image-text pairs (CLIP, BLIP)
  [ ] Educational diagrams (specialized models)

**Implementation Notes:**
- Use CLIP for image-text alignment
- Implement DINOv2 for high-quality visual embeddings
- Create specialized embeddings for educational content
- Ensure embedding space compatibility with text embeddings
- Optimize for semantic search across modalities

### 4. Visual Concept Extraction

[ ] Build systems for:
  [ ] Automatic concept identification in images
  [ ] Relationship extraction between visual elements
  [ ] Visual knowledge graph construction
  [ ] Concept clustering and categorization
  [ ] Educational taxonomy alignment

**Implementation Notes:**
- Implement unsupervised clustering for concept discovery
- Use graph neural networks for relationship extraction
- Create feedback loops for concept refinement
- Develop specialized models for educational concept extraction
- Implement active learning for concept improvement

### 5. Search and Retrieval System

[ ] Develop:
  [ ] Visual search index (FAISS, Milvus)
  [ ] Multimodal query understanding
  [ ] Relevance ranking for visual content
  [ ] Filtering and faceting for educational contexts
  [ ] Result explanation and highlighting

**Implementation Notes:**
- Use FAISS for efficient vector search
- Implement hybrid search combining text and visual features
- Create specialized ranking for educational relevance
- Develop explanation system for search results
- Implement content highlighting for visual elements

### 6. Integration Framework

[ ] Create:
  [ ] Unified API for content processing
  [ ] Batch processing system for large content collections
  [ ] Real-time processing for interactive applications
  [ ] Monitoring and quality assessment
  [ ] Feedback incorporation system

**Implementation Notes:**
- Design RESTful API similar to Coactive's
- Implement async processing with message queues
- Create unified metadata schema across modalities
- Develop comprehensive logging and monitoring
- Build dashboard for system performance

## Technical Implementation Plan

### Phase 1: Core Visual Processing (8 weeks)
- Implement basic image and video processors
- Integrate OCR and object detection models
- Create initial embedding generation
- Develop basic search functionality
- Build API foundation

### Phase 2: Advanced Understanding (10 weeks)
- Implement concept extraction
- Develop relationship identification
- Create knowledge graph integration
- Enhance embedding quality
- Improve search relevance

### Phase 3: Educational Specialization (6 weeks)
- Fine-tune models on educational content
- Develop curriculum alignment features
- Create learning objective mapping
- Implement assessment generation
- Build personalization features

### Phase 4: Scaling and Optimization (4 weeks)
- Optimize for performance
- Implement distributed processing
- Enhance monitoring and reliability
- Develop comprehensive documentation
- Create client SDKs

## Required Technologies

### Core Libraries and Frameworks
- PyTorch or TensorFlow for deep learning
- OpenCV for image processing
- ffmpeg for video processing
- Hugging Face Transformers for models
- FAISS or Milvus for vector search
- FastAPI for API development
- Celery for task queuing
- Redis for caching

### Infrastructure
- GPU servers for model training and inference
- Distributed storage for content (S3, GCS)
- Database for metadata (PostgreSQL)
- Vector database for embeddings (Pinecone, Weaviate)
- Monitoring and logging (Prometheus, Grafana)
- CI/CD pipeline for continuous deployment

### Specialized Components
- Fine-tuned CLIP models for educational content
- Custom OCR models for technical diagrams
- Specialized models for educational concept extraction
- Domain-specific embeddings for educational taxonomies
- Custom relevance ranking for educational search

## Competitive Advantages to Develop

1. **Educational Domain Specialization**
   - Models fine-tuned specifically for educational content
   - Integration with curriculum standards and learning objectives
   - Assessment generation from visual content

2. **Multimodal Understanding**
   - Deep integration between text and visual content
   - Cross-referencing between modalities
   - Unified knowledge representation

3. **Performance Optimization**
   - Faster processing for educational content types
   - More efficient embedding generation
   - Better search relevance for educational queries

4. **User Experience**
   - Specialized interfaces for educators and students
   - Explanation of visual content understanding
   - Integration with learning management systems

## Resources Required

1. **Team**
   - 3-4 ML/CV engineers
   - 2-3 backend developers
   - 1-2 data engineers
   - 1 educational domain expert

2. **Computing**
   - Training: Multiple high-end GPUs (A100s or equivalent)
   - Inference: GPU servers for production deployment
   - Storage: Large-scale object storage for visual content

3. **Data**
   - Diverse educational visual content collection
   - Labeled datasets for model training
   - Curriculum-aligned content for specialization

## Development Roadmap

### Months 1-3: Foundation
- Build core image and video processing pipeline
- Integrate basic CV models
- Develop initial embedding system
- Create API foundation

### Months 4-6: Advanced Features
- Implement concept extraction
- Develop relationship identification
- Create knowledge graph integration
- Enhance search capabilities

### Months 7-9: Educational Focus
- Fine-tune models on educational content
- Develop curriculum alignment
- Create assessment generation
- Build personalization features

### Months 10-12: Production Readiness
- Optimize performance
- Enhance reliability and monitoring
- Develop comprehensive documentation
- Create client SDKs and integration examples

## Key Differentiators from Coactive

1. **Educational Focus**
   - Deep integration with curriculum standards
   - Learning objective alignment
   - Assessment generation capabilities

2. **Open Integration**
   - More flexible API design
   - Better integration with existing educational tools
   - Support for educational metadata standards

3. **Specialized Models**
   - Models optimized specifically for educational diagrams
   - Better understanding of educational concepts
   - Curriculum-aware content processing

4. **Cost Efficiency**
   - More efficient processing pipeline
   - Optimized for educational content types
   - Better resource utilization for typical educational workloads

# MVP Approach: Visual Understanding with Graph Database

## Overview
This MVP approach uses a graph database as the foundation for our visual understanding system, significantly streamlining development while maintaining core functionality.

## Core MVP Components

1. **Simplified Visual Processing Pipeline**
   - Focus only on image and basic video processing initially
   - Use pre-trained models without custom fine-tuning
   - Implement basic OCR for text extraction from images

2. **Graph Database Integration**
   - Use Neo4j as the central knowledge store
   - Create a schema that represents visual elements as nodes
   - Use relationships to connect visual elements to concepts
   - Store embeddings as node properties

3. **Minimal Model Set**
   - Use CLIP for image-text alignment (no custom training)
   - Implement basic object detection with pre-trained YOLO
   - Use off-the-shelf OCR (Tesseract) without customization

## MVP Architecture

```
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│ Content Ingest  │────►│ Feature Extract │────►│ Graph Database  │
│ (Images/Videos) │     │ (CLIP + YOLO)   │     │ (Neo4j)         │
└─────────────────┘     └─────────────────┘     └────────┬────────┘
                                                         │
┌─────────────────┐     ┌─────────────────┐     ┌───────▼────────┐
│ User Interface  │◄────│ Query Engine    │◄────│ Graph Traversal│
│ (Streamlit)     │     │ (Cypher + API)  │     │ & Search       │
└─────────────────┘     └─────────────────┘     └─────────────────┘
```

## What We Can Eliminate

1. **Custom Model Training**
   - Use only pre-trained models
   - Skip fine-tuning for educational content
   - Avoid building specialized models

2. **Complex Processing Pipeline**
   - Skip video scene detection
   - Eliminate specialized diagram understanding
   - Use simple chunking strategies

3. **Advanced Features**
   - Remove concept relationship extraction
   - Skip curriculum alignment features
   - Eliminate assessment generation

4. **Infrastructure Complexity**
   - Use cloud-hosted Neo4j instead of custom infrastructure
   - Skip distributed processing
   - Use simple API server instead of message queues

## Implementation Plan (12 weeks)

### Weeks 1-4: Core Processing
- Set up Neo4j graph database with appropriate schema
- Implement basic image processing with CLIP and YOLO
- Create simple metadata extraction pipeline

### Weeks 5-8: Graph Integration
- Develop graph database integration
- Implement basic search functionality
- Create simple API for content retrieval

### Weeks 9-12: User Interface
- Build Streamlit interface for content exploration
- Implement basic visualization of graph connections
- Create simple content upload and processing workflow

## Technical Stack for MVP

- **Database**: Neo4j (graph database)
- **Models**: CLIP (image-text), YOLOv5 (object detection), Tesseract (OCR)
- **Backend**: FastAPI (simple API server)
- **Frontend**: Streamlit (user interface)
- **Infrastructure**: Cloud-hosted services (minimize self-hosting)

## MVP Capabilities

1. **Basic Visual Understanding**
   - Extract objects and text from images
   - Generate basic image descriptions
   - Create connections between related images

2. **Graph-Based Exploration**
   - Navigate content through graph relationships
   - Discover related visual content
   - Explore connections between concepts

3. **Simple Search**
   - Find images based on text descriptions
   - Search for specific objects in images
   - Retrieve content based on extracted metadata

## Future Expansion Path

After MVP, prioritize these enhancements:
1. Add custom model fine-tuning for educational content
2. Implement curriculum alignment features
3. Develop more sophisticated relationship extraction
4. Add video processing capabilities
5. Create assessment generation features